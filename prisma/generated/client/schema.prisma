generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  username  String    @unique
  email     String    @unique
  password  String?
  avatarUrl String?   @map("avatar_url")
  role      UserRole  @default(MEMBER)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  session             Session?
  accounts            Account[]
  tokens              Token[]
  invitationsSent     Invitation[]  @relation("sentInvitations")
  invitationsReceived Invitation[]  @relation("receivedInvitations")
  friendships         Friendship[]  @relation("userFriendships")
  friendOf            Friendship[]  @relation("friendOf")
  participants        Participant[] // relacionamento com salas
  chatMessages        ChatMessage[]
  readReceipts        ReadReceipt[]

  @@map("users")
}

enum AccountProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

model Account {
  id                String          @id @unique @default(uuid())
  userId            String          @map("user_id")
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime?       @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, provider])
  @@map("accounts")
}

model Session {
  id           String    @id @unique @default(uuid())
  userId       String    @unique @map("user_id")
  sessionToken String
  socketId     String?   @map("socket_id")
  lastSeen     DateTime? @map("last_seen")
  expiresAt    DateTime  @map("expires_at")
  registerAt   DateTime  @map("register_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

enum TokenType {
  PASSWORD_RECOVER
  PASSWORD_RESET
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("tokens")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Invitation {
  id         String           @id @default(uuid())
  senderId   String           @map("sender_id")
  receiverId String           @map("receiver_id")
  status     InvitationStatus @default(PENDING)
  repliedAt  DateTime?        @map("replied_at")
  createdAt  DateTime         @default(now()) @map("created_at")

  sender   User @relation("sentInvitations", fields: [senderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  receiver User @relation("receivedInvitations", fields: [receiverId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId, status])
  @@map("invitations")
}

model Friendship {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation("userFriendships", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  friend User @relation("friendOf", fields: [friendId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

enum RoomType {
  PRIVATE
  GROUP
}

model Room {
  id        String   @id @default(uuid())
  type      RoomType @default(PRIVATE) @map("room_type")
  createdAt DateTime @default(now()) @map("created_at")

  participants Participant[]
  chatMessages ChatMessage[]
  attachments  Attachment[]

  @@index([type])
  @@map("rooms")
}

model Participant {
  id     String @id @default(uuid())
  roomId String @map("room_id")
  userId String @map("user_id")

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@map("participants")
}

model ChatMessage {
  id        String    @id @default(uuid())
  roomId    String    @map("room_id")
  senderId  String    @map("sender_id")
  content   String
  isDeleted Boolean   @default(false) @map("is_deleted")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  room   Room @relation(fields: [roomId], references: [id])
  author User @relation(fields: [senderId], references: [id])

  readReceipts ReadReceipt[]
  attachments  Attachment[]

  @@index([roomId, createdAt])
  @@map("chat_messages")
}

model ReadReceipt {
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @default(now()) @map("read_at")

  user    User        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  message ChatMessage @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId, readAt])
  @@map("read_receipts")
}

enum AttachmentType {
  IMAGE
  VIDEO
  DOCUMENT
  FILE
  AUDIO
}

model Attachment {
  id        String         @id @default(uuid())
  title     String         @unique
  url       String
  type      AttachmentType
  messageId String?        @map("message_id")
  roomId    String?        @map("room_id")

  room    Room?        @relation(fields: [roomId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  message ChatMessage? @relation(fields: [messageId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([roomId])
  @@map("attachments")
}

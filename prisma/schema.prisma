// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  username  String    @unique
  email     String    @unique
  password  String?
  avatarUrl String?   @map("avatar_url")
  role      UserRole  @default(MEMBER)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  session  Session?
  accounts Account[]
  tokens   Token[]

  @@map("users")
}

enum AccountProvider {
  CREDENTIALS
  GOOGLE
  GITHUB
}

model Account {
  id                String          @id @unique @default(uuid())
  userId            String          @map("user_id")
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime?       @map("updated_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, provider])
  @@map("accounts")
}

model Session {
  id           String    @id @unique @default(uuid())
  userId       String    @unique @map("user_id")
  sessionToken String
  socketId     String?   @map("socket_id")
  lastSeen     DateTime? @map("last_seen")
  expiresAt    DateTime  @map("expires_at")
  registerAt   DateTime  @map("register_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

enum TokenType {
  PASSWORD_RECOVER
  PASSWORD_RESET
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("tokens")
}
